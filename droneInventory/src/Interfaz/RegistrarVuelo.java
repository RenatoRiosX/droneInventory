package Interfaz;

import Dominio.*;
import Utilitario.*;
import java.awt.*;
import java.io.File;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.util.Observable;
import java.util.Observer;

/**
 * @autor Kevin Helle - Estudiante: 208084;
 * @autor Renato Rios - Estudiante: 270586;
 */
public class RegistrarVuelo extends javax.swing.JFrame implements Observer {

    public ArrayList<Integer> codigoVueloArchivo;
    public static DefaultTableModel defaultTableModel = new DefaultTableModel();
    private int coincidencias;
    private int diferencias;

    public RegistrarVuelo(Sistema unSistema) {
        modelo = unSistema;
        modelo.addObserver(this);
        initComponents();
        // centrar ventana
        this.setLocationRelativeTo(null);
        codigoVueloArchivo = new ArrayList<>();;
        String[] titulosCol = new String[]{"De", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
        defaultTableModel.setColumnIdentifiers(titulosCol);
        
        //Para que las celdas de la tabla no sean editables
        tblTablaComparacion.setDefaultEditor(Object.class, null);
        
        tblTablaComparacion.setModel(defaultTableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fcSeleccionarArchivo = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTablaComparacion = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblFila = new javax.swing.JLabel();
        lblTotalCoincidencias = new javax.swing.JLabel();
        lblArea = new javax.swing.JLabel();
        lblTotalDiferencias = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registrar vuelo de dron");
        setBackground(new java.awt.Color(0, 0, 0));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("√Årea:");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Fila:");

        fcSeleccionarArchivo.setBackground(new java.awt.Color(0, 0, 0));
        fcSeleccionarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fcSeleccionarArchivoActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0));

        tblTablaComparacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "De", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"
            }
        ));
        tblTablaComparacion.setEnabled(false);
        tblTablaComparacion.setGridColor(new java.awt.Color(153, 153, 153));
        jScrollPane1.setViewportView(tblTablaComparacion);

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Total coincidencias:");

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Total diferencias:");

        lblFila.setForeground(new java.awt.Color(255, 255, 255));
        lblFila.setText("--");

        lblTotalCoincidencias.setForeground(new java.awt.Color(255, 255, 255));
        lblTotalCoincidencias.setText("--");

        lblArea.setForeground(new java.awt.Color(255, 255, 255));
        lblArea.setText("--");

        lblTotalDiferencias.setForeground(new java.awt.Color(255, 255, 255));
        lblTotalDiferencias.setText("--");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(fcSeleccionarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 866, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTotalCoincidencias, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTotalDiferencias, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 846, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblArea, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFila, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(fcSeleccionarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(lblFila)
                    .addComponent(lblArea))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblTotalCoincidencias))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblTotalDiferencias))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fcSeleccionarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fcSeleccionarArchivoActionPerformed

        File archivoSeleccionado = fcSeleccionarArchivo.getSelectedFile();

        int cantidadDeCargas = 0;
        boolean vueloExitoso = false;

        //Se abre el stream
        String nombreArchivo = archivoSeleccionado.getPath();

        ArchivoLectura archivo = new ArchivoLectura(nombreArchivo);

        archivo.hayMasLineas();
        String idDron = archivo.linea();
        archivo.hayMasLineas();
        String areaFila = archivo.linea();

        String datosAreaF []= areaFila.split("#");
        int fila = Integer.parseInt(datosAreaF[1]);

        while (archivo.hayMasLineas()) {

            cantidadDeCargas++;
            if (cantidadDeCargas == 10) {
                vueloExitoso = true;
            }
            int codigoCarga = Integer.parseInt(archivo.linea());
            
            codigoVueloArchivo.add(codigoCarga);

        }

        if (vueloExitoso) {
            //Se carga los datos del archivo en la tabla
            cargarCodigosEnTabla();
            //Carga los datos del area dada por el archivo en la tabla de vuelo
            int codigoManuales[] = cargarCodigosManuales(areaFila);

            cargarCodigosManualesEnTabla(codigoManuales);

            lblArea.setText(datosAreaF[0]);
            lblFila.setText(datosAreaF[1]);
            contadorCoincidencias(codigoManuales);
            JOptionPane.showMessageDialog(this, "El vuelo ha sido ingresado correctamente", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);

        } else {

            defaultTableModel.setRowCount(0);
            lblArea.setText("--");
            lblFila.setText("--");
            lblTotalCoincidencias.setText("--");
            lblTotalDiferencias.setText("--");
            JOptionPane.showMessageDialog(this, "Vuelo no exitoso", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);

        }
        
        modelo.crearVuelo(idDron,datosAreaF[0],fila,codigoVueloArchivo,nombreArchivo,vueloExitoso,coincidencias,diferencias,cantidadDeCargas);

        //Se cierra el stream
        archivo.cerrar();

        codigoVueloArchivo.clear();
    }//GEN-LAST:event_fcSeleccionarArchivoActionPerformed
        
    private void contadorCoincidencias(int codigos[]){
        coincidencias = 0;
        diferencias = 0;
        for (int i = 0; i < 10; i++) {
            if (codigos[i] == codigoVueloArchivo.get(i)){        
                //Se pinta de verde la columna
                DefaultTableCellRenderer rendar1 = new DefaultTableCellRenderer();
                rendar1.setBackground(Color.green);

                tblTablaComparacion.getColumnModel().getColumn(i+1).setCellRenderer(rendar1);
                coincidencias++;                
            } else {

                //Se pinta de rojo la columna
                DefaultTableCellRenderer rendar1 = new DefaultTableCellRenderer();
                rendar1.setBackground(Color.red);

                tblTablaComparacion.getColumnModel().getColumn(i+1).setCellRenderer(rendar1);
                diferencias++;
            }
        }
        lblTotalCoincidencias.setText(coincidencias+"");
        lblTotalDiferencias.setText(diferencias+"");
    }
    
    private void cargarCodigosEnTabla() {
        defaultTableModel.setRowCount(0);
        defaultTableModel.addRow(new Object[]{
            "Archivo",
            codigoVueloArchivo.get(0),
            codigoVueloArchivo.get(1),
            codigoVueloArchivo.get(2),
            codigoVueloArchivo.get(3),
            codigoVueloArchivo.get(4),
            codigoVueloArchivo.get(5),
            codigoVueloArchivo.get(6),
            codigoVueloArchivo.get(7),
            codigoVueloArchivo.get(8),
            codigoVueloArchivo.get(9)});

    }

    private void cargarCodigosManualesEnTabla(int codigos[]) {

        defaultTableModel.addRow(new Object[]{
            "Manuales",
            codigos[0],
            codigos[1],
            codigos[2],
            codigos[3],
            codigos[4],
            codigos[5],
            codigos[6],
            codigos[7],
            codigos[8],
            codigos[9],});

    }

    public int[] cargarCodigosManuales(String areaFila) {
        int listaCodigosManuales[] = new int[10];
        String areaYFila[] = areaFila.split("#");
        String area = areaYFila[0];

        int fila = Integer.parseInt(areaYFila[1]);
        
        Area listaAreas[] = modelo.getListaAreas();
        
        for (int i = 0; i < modelo.getListaAreas().length; i++) {

            String areaEnLista = listaAreas[i].getIdArea();

            if (areaEnLista.equals(area)) {

                //Se guarda el area a recorrer en areaSeleccionada
                Carga areaSeleccionada[][] = listaAreas[i].getArea();

                for (int j = 0; j < 10; j++) {

                    Carga carga = areaSeleccionada[fila - 1][j];
                    if (carga == null) {
                        listaCodigosManuales[j] = 0;
                    } else {
                        listaCodigosManuales[j] = carga.getCodigoManual();
                    }

                }

            }

        }
        return listaCodigosManuales;

    }
    
    @Override
    public void update (Observable o, Object arg){
        //lstFuncionarios.setListData( modelo.getListaFuncionarios().toArray());
        //lstArticulos.setListData( modelo.getListaArticulos().toArray());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fcSeleccionarArchivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblArea;
    private javax.swing.JLabel lblFila;
    private javax.swing.JLabel lblTotalCoincidencias;
    private javax.swing.JLabel lblTotalDiferencias;
    private javax.swing.JTable tblTablaComparacion;
    // End of variables declaration//GEN-END:variables

    private Sistema modelo;
}
